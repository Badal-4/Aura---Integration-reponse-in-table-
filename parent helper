({
    getReportData : function(component) {        
        var action=component.get('c.getReportList');        
        action.setCallback(this,function(response){   
            if(response.getState()=='SUCCESS'){
                var records = response.getReturnValue();
                component.set("v.reportlist",response.getReturnValue());                
            }
            else 
            {
                console.log('Error-->'+JSON.stringify(response.getError()));
            }
           
        });
        $A.enqueueAction(action);        
    },
    downloadSelectedReport :function(component, event,helper){
         var recordsList = component.get("v.demoList");
         var csv = helper.convertListToCSV(component, recordsList);
         if (csv == null){return;}
         // Create a temporal <a> html tag to download the CSV file
         var hiddenElement = document.createElement('a');
         hiddenElement.href = 'data:text/pdf;charset=utf-8,' + encodeURI(csv);
         hiddenElement.target = '_self';
         hiddenElement.download ='ReportExportData.csv';;
         document.body.appendChild(hiddenElement);
         // using click() js function to download csv file
         hiddenElement.click();
    },
    convertListToCSV : function(component, sObjectList){
        if (sObjectList == null || sObjectList.length == 0) {
            return null; // 
        }

        // CSV file parameters.
        var columnEnd = ',';
        var lineEnd =  '\n';

        // Get the CSV header from the list.
        var keys = new Set();
        sObjectList.forEach(function (record) {
            Object.keys(record).forEach(function (key) {
                keys.add(key);
            });
        });

        // 
        keys = Array.from(keys);

        var csvString = '';
        csvString += keys.join(columnEnd);
        csvString += lineEnd;

        for(var i=0; i < sObjectList.length; i++){
            var counter = 0;

            for(var sTempkey in keys) {
                var skey = keys[sTempkey] ;

                // add , after every value except the first.
                if(counter > 0){
                    csvString += columnEnd;
                }

                // If the column is undefined, leave it as blank in the CSV file.
                var value = sObjectList[i][skey] === undefined ? '' : sObjectList[i][skey];
                csvString += '"'+ value +'"';
                counter++;
            }

            csvString += lineEnd;
        }

        return csvString;
    },

    updateFavourite : function(component,event,helper)
    {
        var tempid = event.getSource().get("v.value");
       
        component.set("v.rcdId",tempid);
        var rcdIds = component.get("v.rcdId");
       // alert('myId'+rcdIds);
        var action = component.get("c.updateFavCheckbox");
        action.setParams({
            "recordId" : component.get("v.rcdId")
        });
        action.setCallback(this,function(response)
        {
            var state = response.getState();
            if(state === "SUCCESS")
            {
                //console.log("Success");
                //window.location.reload();
              
            }
            else 
            {
                console.log('Error update-->'+JSON.stringify(response.getError()));
            }
            
      
        });
        $A.enqueueAction(action);   
       
    },

    handleRun : function(component,event,helper,endpoint, recId)
    {
        // var url = window.location.origin + '/community/s/custom-report-detail';
        var url = window.location.origin + '/community/s/custom-report-detail?endp='+recId;
        window.open(url,'_blank');
        helper.updateLastAcc(component,event,helper,recId);
    },

  updateLastAcc : function(component,event,helper,rcdId)
  {     
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        var action = component.get("c.updateLastAcc");
        action.setParams({
            "recordId" : rcdId,
            "d" : today
        });
        action.setCallback(this,function(response)
        {
            var state = response.getState();
            if(state === "SUCCESS")
            {
                var arr_reports = component.get("v.reportlist");
                if(!$A.util.isEmpty(arr_reports)){
                    for(var i=0; i < arr_reports.length; i++){
                        arr_reports[i].LastAccessed__c = today;
                    }
                    component.set("v.reportlist",arr_reports);
                }
            }
            else 
            {
                console.log('Error update-->'+JSON.stringify(response.getError()));
            }
        });
        $A.enqueueAction(action);   
  }
})
